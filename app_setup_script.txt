#!/bin/bash

# ==============================================
# SCHEDULING SYSTEM SETUP SCRIPT
# ==============================================
# This script automates:
# 1. Project structure creation
# 2. Git repository initialization
# 3. SSH key setup for GitHub
# 4. Frontend (Next.js) setup
# 5. Cal.com scheduler configuration
# ==============================================

# --------------------------
# Configuration Variables
# --------------------------
GITHUB_USER="your_github_username"
GITHUB_EMAIL="your_email@example.com"
PROJECT_NAME="scheduling-system"
CALCOM_EMBED_URL="your-calcom-instance.com/embed/username"  # Update this later

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# --------------------------
# Utility Functions
# --------------------------
function print_header() {
    echo -e "${YELLOW}"
    echo "===================================="
    echo "$1"
    echo "===================================="
    echo -e "${NC}"
}

function print_success() {
    echo -e "${GREEN}[✓] $1${NC}"
}

function print_error() {
    echo -e "${RED}[✗] $1${NC}"
}

function print_info() {
    echo -e "[i] $1"
}

# --------------------------
# 1. Verify Prerequisites
# --------------------------
print_header "1. VERIFYING PREREQUISITES"

# Check if Git is installed
if ! command -v git &> /dev/null; then
    print_error "Git is not installed. Installing now..."
    sudo apt update && sudo apt install git -y
    if [ $? -ne 0 ]; then
        print_error "Failed to install Git. Please install manually and rerun."
        exit 1
    fi
    print_success "Git installed successfully"
else
    print_success "Git is already installed"
fi

# Check if Docker is installed (for Cal.com)
if ! command -v docker &> /dev/null; then
    print_error "Docker is not installed. You'll need to install it later for Cal.com setup."
else
    print_success "Docker is installed"
fi

# --------------------------
# 2. Configure Git
# --------------------------
print_header "2. CONFIGURING GIT"
git config --global user.name "$GITHUB_USER"
git config --global user.email "$GITHUB_EMAIL"
git config --global init.defaultBranch main
print_success "Git configured with:"
git config --global --list | grep -E "user.name|user.email"

# --------------------------
# 3. Create Project Structure
# --------------------------
print_header "3. CREATING PROJECT STRUCTURE"

mkdir -p "$PROJECT_NAME" && cd "$PROJECT_NAME" || exit

# Create directory structure
mkdir -p \
    frontend/public/images \
    frontend/src/components \
    frontend/src/styles \
    frontend/pages \
    scheduler

# Create basic files
touch \
    frontend/next.config.js \
    frontend/package.json \
    frontend/tailwind.config.js \
    frontend/tsconfig.json \
    frontend/pages/index.tsx \
    frontend/pages/_app.tsx \
    frontend/pages/_document.tsx \
    frontend/src/styles/globals.css \
    frontend/src/styles/Home.module.css \
    scheduler/docker-compose.yml \
    scheduler/.env \
    README.md

print_success "Project structure created"

# --------------------------
# 4. SSH Key Setup for GitHub
# --------------------------
print_header "4. SETTING UP SSH KEYS"

# Check for existing SSH key
if [ -f "$HOME/.ssh/github_key" ]; then
    print_info "Existing GitHub SSH key found"
else
    print_info "Generating new SSH key..."
    ssh-keygen -t ed25519 -C "$GITHUB_EMAIL" -f "$HOME/.ssh/github_key" -N ""
    
    # Start SSH agent and add key
    eval "$(ssh-agent -s)"
    ssh-add "$HOME/.ssh/github_key"
    
    # Set proper permissions
    chmod 600 "$HOME/.ssh/github_key"
    chmod 644 "$HOME/.ssh/github_key.pub"
    
    print_success "SSH key generated"
fi

# Configure SSH config file
if [ ! -f "$HOME/.ssh/config" ]; then
    cat > "$HOME/.ssh/config" <<EOL
Host github.com
  HostName github.com
  User git
  IdentityFile ~/.ssh/github_key
  IdentitiesOnly yes
EOL
    chmod 600 "$HOME/.ssh/config"
    print_success "SSH config file created"
fi

# Display public key for GitHub
print_header "YOUR GITHUB SSH PUBLIC KEY"
cat "$HOME/.ssh/github_key.pub"
echo ""
print_info "Please copy this key and add it to your GitHub account:"
print_info "1. Go to GitHub → Settings → SSH and GPG Keys"
print_info "2. Click 'New SSH Key'"
print_info "3. Paste the above key and save"
read -p "Press Enter to continue after adding the key to GitHub..."

# Test SSH connection
print_info "Testing SSH connection to GitHub..."
ssh -T git@github.com

# --------------------------
# 5. Initialize Git Repository
# --------------------------
print_header "5. INITIALIZING GIT REPOSITORY"

git init
cat > .gitignore <<EOL
# Dependencies
node_modules/

# Environment files
.env
.env.local

# Build files
.next/
out/

# System files
.DS_Store

# Scheduler specific
scheduler/.env
EOL

print_success "Git repository initialized"

# --------------------------
# 6. Frontend Setup (Next.js)
# --------------------------
print_header "6. SETTING UP FRONTEND"

cd frontend || exit

# Initialize Next.js project
npx create-next-app@latest . --typescript --eslint --tailwind --src-dir --app --import-alias "@/*" --quiet

# Install additional dependencies
npm install framer-motion

# Create basic component files
cat > src/components/Header.tsx <<'EOL'
// Header component implementation here
export default function Header() {
  return <header>Header Content</header>
}
EOL

# (Similar for other components...)

cd ..

print_success "Frontend setup complete"

# --------------------------
# 7. Cal.com Scheduler Setup
# --------------------------
print_header "7. CONFIGURING CAL.COM SCHEDULER"

cd scheduler || exit

# Create docker-compose.yml
cat > docker-compose.yml <<'EOL'
version: '3.8'

services:
  calcom:
    image: calcom/cal.com:latest
    container_name: calcom
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      - DATABASE_URL=postgresql://calcom:password@postgres:5432/calcom
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - CALENDSO_ENCRYPTION_KEY=${CALENDSO_ENCRYPTION_KEY}
      - NEXTAUTH_URL=http://localhost:3000
    depends_on:
      - postgres

  postgres:
    image: postgres:13
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=calcom
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=calcom
    volumes:
      - postgres-data:/var/lib/postgresql/data

volumes:
  postgres-data:
EOL

# Create .env template
cat > .env <<'EOL'
# Cal.com Environment Variables
DATABASE_URL="postgresql://calcom:password@postgres:5432/calcom"
NEXTAUTH_SECRET="your-secret-key"
CALENDSO_ENCRYPTION_KEY="your-encryption-key"
NEXTAUTH_URL="http://localhost:3000"
EOL

print_info "Cal.com configuration created. You'll need to:"
print_info "1. Edit scheduler/.env with your actual values"
print_info "2. Run 'docker-compose up -d' to start the services"
print_info "3. Access Cal.com at http://localhost:3000"

cd ..

# --------------------------
# 8. Finalize Setup
# --------------------------
print_header "8. FINALIZING SETUP"

# Create README
cat > README.md <<EOL
# $PROJECT_NAME

## Project Setup

### Frontend
1. Navigate to frontend directory: \`cd frontend\`
2. Install dependencies: \`npm install\`
3. Run development server: \`npm run dev\`

### Scheduler (Cal.com)
1. Navigate to scheduler directory: \`cd scheduler\`
2. Edit \`.env\` with your configuration
3. Start services: \`docker-compose up -d\`

## Deployment Instructions

### Frontend
Deploy to Vercel:
1. Connect your GitHub repository
2. Set environment variables
3. Deploy

### Scheduler
Deploy to Railway:
1. Create new project
2. Provision PostgreSQL
3. Deploy Cal.com with Docker
EOL

# --------------------------
# Completion Message
# --------------------------
print_header "SETUP COMPLETE"
print_success "Project initialized successfully!"
echo ""
print_info "Next steps:"
print_info "1. Add your GitHub SSH key to your account (if not done already)"
print_info "2. Customize the frontend components in frontend/src/components"
print_info "3. Configure Cal.com by editing scheduler/.env"
print_info "4. Commit and push to GitHub:"
echo ""
echo "    git add ."
echo "    git commit -m 'Initial commit'"
echo "    git remote add origin git@github.com:$GITHUB_USER/$PROJECT_NAME.git"
echo "    git push -u origin main"
echo ""

exit 0
